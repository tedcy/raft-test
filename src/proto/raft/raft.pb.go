// Code generated by protoc-gen-go.
// source: raft.proto
// DO NOT EDIT!

/*
Package raft is a generated protocol buffer package.

It is generated from these files:
	raft.proto

It has these top-level messages:
	VoteRequest
	VoteResponse
	HeartBeatRequest
	HeartBeatResponse
	SetRequest
	SetResponse
	GetRequest
	GetResponse
*/
package raft

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type VoteRequest struct {
	Term uint64 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	Addr string `protobuf:"bytes,2,opt,name=addr" json:"addr,omitempty"`
}

func (m *VoteRequest) Reset()                    { *m = VoteRequest{} }
func (m *VoteRequest) String() string            { return proto.CompactTextString(m) }
func (*VoteRequest) ProtoMessage()               {}
func (*VoteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *VoteRequest) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *VoteRequest) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type VoteResponse struct {
	Ok bool `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
}

func (m *VoteResponse) Reset()                    { *m = VoteResponse{} }
func (m *VoteResponse) String() string            { return proto.CompactTextString(m) }
func (*VoteResponse) ProtoMessage()               {}
func (*VoteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *VoteResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type HeartBeatRequest struct {
	Term uint64 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	Addr string `protobuf:"bytes,2,opt,name=addr" json:"addr,omitempty"`
}

func (m *HeartBeatRequest) Reset()                    { *m = HeartBeatRequest{} }
func (m *HeartBeatRequest) String() string            { return proto.CompactTextString(m) }
func (*HeartBeatRequest) ProtoMessage()               {}
func (*HeartBeatRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *HeartBeatRequest) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *HeartBeatRequest) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type HeartBeatResponse struct {
}

func (m *HeartBeatResponse) Reset()                    { *m = HeartBeatResponse{} }
func (m *HeartBeatResponse) String() string            { return proto.CompactTextString(m) }
func (*HeartBeatResponse) ProtoMessage()               {}
func (*HeartBeatResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type SetRequest struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *SetRequest) Reset()                    { *m = SetRequest{} }
func (m *SetRequest) String() string            { return proto.CompactTextString(m) }
func (*SetRequest) ProtoMessage()               {}
func (*SetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SetRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *SetRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type SetResponse struct {
}

func (m *SetResponse) Reset()                    { *m = SetResponse{} }
func (m *SetResponse) String() string            { return proto.CompactTextString(m) }
func (*SetResponse) ProtoMessage()               {}
func (*SetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type GetRequest struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GetRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type GetResponse struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *GetResponse) Reset()                    { *m = GetResponse{} }
func (m *GetResponse) String() string            { return proto.CompactTextString(m) }
func (*GetResponse) ProtoMessage()               {}
func (*GetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GetResponse) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto.RegisterType((*VoteRequest)(nil), "raft.VoteRequest")
	proto.RegisterType((*VoteResponse)(nil), "raft.VoteResponse")
	proto.RegisterType((*HeartBeatRequest)(nil), "raft.HeartBeatRequest")
	proto.RegisterType((*HeartBeatResponse)(nil), "raft.HeartBeatResponse")
	proto.RegisterType((*SetRequest)(nil), "raft.SetRequest")
	proto.RegisterType((*SetResponse)(nil), "raft.SetResponse")
	proto.RegisterType((*GetRequest)(nil), "raft.GetRequest")
	proto.RegisterType((*GetResponse)(nil), "raft.GetResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Raft service

type RaftClient interface {
	Vote(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	HeartBeat(ctx context.Context, in *HeartBeatRequest, opts ...grpc.CallOption) (*HeartBeatResponse, error)
	Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
}

type raftClient struct {
	cc *grpc.ClientConn
}

func NewRaftClient(cc *grpc.ClientConn) RaftClient {
	return &raftClient{cc}
}

func (c *raftClient) Vote(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/raft.Raft/Vote", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClient) HeartBeat(ctx context.Context, in *HeartBeatRequest, opts ...grpc.CallOption) (*HeartBeatResponse, error) {
	out := new(HeartBeatResponse)
	err := grpc.Invoke(ctx, "/raft.Raft/HeartBeat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClient) Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error) {
	out := new(SetResponse)
	err := grpc.Invoke(ctx, "/raft.Raft/Set", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := grpc.Invoke(ctx, "/raft.Raft/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Raft service

type RaftServer interface {
	Vote(context.Context, *VoteRequest) (*VoteResponse, error)
	HeartBeat(context.Context, *HeartBeatRequest) (*HeartBeatResponse, error)
	Set(context.Context, *SetRequest) (*SetResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
}

func RegisterRaftServer(s *grpc.Server, srv RaftServer) {
	s.RegisterService(&_Raft_serviceDesc, srv)
}

func _Raft_Vote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).Vote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.Raft/Vote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).Vote(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raft_HeartBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartBeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).HeartBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.Raft/HeartBeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).HeartBeat(ctx, req.(*HeartBeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raft_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.Raft/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).Set(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raft_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.Raft/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Raft_serviceDesc = grpc.ServiceDesc{
	ServiceName: "raft.Raft",
	HandlerType: (*RaftServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Vote",
			Handler:    _Raft_Vote_Handler,
		},
		{
			MethodName: "HeartBeat",
			Handler:    _Raft_HeartBeat_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _Raft_Set_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Raft_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raft.proto",
}

func init() { proto.RegisterFile("raft.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 268 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x92, 0x4f, 0x4b, 0xc3, 0x40,
	0x14, 0xc4, 0x4d, 0x1a, 0xc5, 0x4c, 0x54, 0x92, 0xa7, 0x68, 0xc9, 0xa1, 0x94, 0xf5, 0xd2, 0x83,
	0x54, 0xf0, 0xcf, 0xc5, 0x83, 0x07, 0x2f, 0xf1, 0xbc, 0x05, 0xef, 0x2b, 0x7d, 0xbd, 0x44, 0xdd,
	0xba, 0xd9, 0x0a, 0x7e, 0x4e, 0xbf, 0x90, 0x64, 0x37, 0x24, 0x8b, 0x05, 0xa1, 0xb7, 0xc9, 0x30,
	0xf3, 0x7b, 0x64, 0x58, 0xc0, 0xa8, 0x95, 0x9d, 0xaf, 0x8d, 0xb6, 0x9a, 0x92, 0x56, 0x8b, 0x7b,
	0x64, 0x2f, 0xda, 0xb2, 0xe4, 0xcf, 0x0d, 0x37, 0x96, 0x08, 0x89, 0x65, 0xf3, 0x3e, 0x8e, 0xa6,
	0xd1, 0x2c, 0x91, 0x4e, 0xb7, 0x9e, 0x5a, 0x2e, 0xcd, 0x38, 0x9e, 0x46, 0xb3, 0x54, 0x3a, 0x2d,
	0x26, 0x38, 0xf2, 0xb5, 0x66, 0xad, 0x3f, 0x1a, 0xa6, 0x13, 0xc4, 0xba, 0x76, 0xad, 0x43, 0x19,
	0xeb, 0x5a, 0x3c, 0x20, 0x7f, 0x66, 0x65, 0xec, 0x13, 0x2b, 0xbb, 0x2b, 0xfb, 0x14, 0x45, 0xd0,
	0xf5, 0x07, 0xc4, 0x1d, 0xb0, 0xe0, 0x1e, 0x95, 0x63, 0x54, 0xf3, 0xb7, 0x23, 0xa5, 0xb2, 0x95,
	0x74, 0x86, 0xfd, 0x2f, 0xf5, 0xb6, 0xe1, 0x8e, 0xe4, 0x3f, 0xc4, 0x31, 0x32, 0xd7, 0xea, 0x20,
	0x13, 0xa0, 0xfa, 0x07, 0x22, 0x2e, 0x91, 0x55, 0x43, 0x7c, 0x60, 0x46, 0x01, 0xf3, 0xe6, 0x27,
	0x42, 0x22, 0xd5, 0xca, 0xd2, 0x35, 0x92, 0x76, 0x03, 0x2a, 0xe6, 0x6e, 0xd5, 0x60, 0xc6, 0x92,
	0x42, 0xab, 0x3b, 0xbe, 0x47, 0x8f, 0x48, 0xfb, 0x1f, 0xa3, 0x73, 0x1f, 0xf9, 0xbb, 0x52, 0x79,
	0xb1, 0xe5, 0xf7, 0xfd, 0x2b, 0x8c, 0x16, 0x6c, 0x29, 0xf7, 0x89, 0x61, 0x8e, 0xb2, 0x08, 0x9c,
	0x30, 0x5d, 0x0d, 0xe9, 0x6a, 0x2b, 0x5d, 0x85, 0xe9, 0xd7, 0x03, 0xf7, 0x28, 0x6e, 0x7f, 0x03,
	0x00, 0x00, 0xff, 0xff, 0xfa, 0x6f, 0xc3, 0x3c, 0x22, 0x02, 0x00, 0x00,
}
